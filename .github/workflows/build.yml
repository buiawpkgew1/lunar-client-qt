name: Build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build_windows:
    name: "Windows Build"
    if: ${{ false }}
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2
        
    - name: Install Qt & MinGW
      uses: jurplel/install-qt-action@v2
      with:
        version: '5.15.2'
        host: 'windows'
        target: 'desktop'
        arch: 'win64_mingw81'
        install-deps: 'true'
        tools: 'tools_mingw,8.1.0-1-202004170606,qt.tools.win64_mingw810'
        setup-python: 'false'
      
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -G "MinGW Makefiles"

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
      
    - name: Replace Default Mingw
      shell: bash
      run: |
        choco uninstall mingw --force
        echo "$IQTA_TOOLS/mingw810_64/bin" >> $GITHUB_PATH 
      
    - name: Package Dependencies
      shell: bash
      working-directory: ${{github.workspace}}/build
      run: |
        echo $GITHUB_PATH
        cat $GITHUB_PATH
        mkdir with_deps
        mv lunar-client-qt.exe with_deps/
        windeployqt deps/ --compiler-runtime --no-angle --no-opengl-sw --no-virtualkeyboard --no-webkit2 --no-system-d3d-compiler --no-translations --no-quick-import
    - name: Check mingw g++ version
      run: |
        Write-Output (Get-Command g++.exe).Path
        echo $env:PATH
        g++.exe --version     
    - name: Upload Artifiact
      uses: actions/upload-artifact@v2
      with:
        name: windows
        path: ${{github.workspace}}/build/deps/